# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("corenic-slave-1", "qwe123"),
                worker.Worker("corenic-slave-2", "qwe123"),
                worker.Worker("corenic-slave-3", "qwe123"),
                worker.Worker("corenic-slave-4", "qwe123")]

corenic_workers = ["corenic-slave-1",
                   "corenic-slave-2",
                   "corenic-slave-3",
                   "corenic-slave-4"]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://source.netronome.com/nfp-nic.git',
        workdir='gitpoller-nfp-nic', branches=['master', 'bpf', 'abm'],
        pollinterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.plugins import schedulers, util

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="corenicSched",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["corenic-build"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="bpfSched",
                            change_filter=util.ChangeFilter(branch='bpf'),
                            treeStableTimer=None,
                            builderNames=["bpf-build"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="abmSched",
                            change_filter=util.ChangeFilter(branch='abm'),
                            treeStableTimer=None,
                            builderNames=["abm-build"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="forceCorenicSched",
                            buttonName="Force",
                            builderNames=["corenic-build"],
                            codebases=[
                                util.CodebaseParameter(
                                    "",
                                    label="Main repository",
                                    repository=util.FixedParameter(name="repository", default=""),
                                    project=util.FixedParameter(name="project", default=""),
                                    branch=util.FixedParameter(name="branch", default="master"))]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="forceBpfSched",
                            buttonName="Force",
                            builderNames=["bpf-build"],
                            codebases=[
                                util.CodebaseParameter(
                                    "",
                                    label="Main repository",
                                    repository=util.FixedParameter(name="repository", default=""),
                                    project=util.FixedParameter(name="project", default=""),
                                    branch=util.FixedParameter(name="branch", default="bpf"))]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="forceAbmSched",
                            buttonName="Force",
                            builderNames=["abm-build"],
                            codebases=[
                                util.CodebaseParameter(
                                    "",
                                    label="Main repository",
                                    repository=util.FixedParameter(name="repository", default=""),
                                    project=util.FixedParameter(name="project", default=""),
                                    branch=util.FixedParameter(name="branch", default="abm"))]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
nfp_lock = util.WorkerLock("local_nfp_worker")

corenicFactory = util.BuildFactory()
corenicFactory.addStep(steps.Git(repourl="git://source.netronome.com/nfp-nic.git", branch="master", mode="full", method="clobber", name="clone"))
corenicFactory.addStep(steps.ShellCommand(command=["make", "test"], env={"HG_USERNAME": "bbslave", "COLOR": "no"}, locks=[nfp_lock.access('exclusive')], name="unit_test"))
corenicFactory.addStep(steps.ShellCommand(command=["make", "package"], name="build"))
corenicFactory.addStep(steps.ShellCommand(command="scp -r ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/current/", name="distribute"))

bpfFactory = util.BuildFactory()
bpfFactory.addStep(steps.Git(repourl="git://source.netronome.com/nfp-nic.git", branch="bpf", mode="full", method="clobber", name="clone"))
bpfFactory.addStep(steps.ShellCommand(command=["make", "test"], env={"HG_USERNAME": "bbslave", "COLOR": "no"}, locks=[nfp_lock.access('exclusive')], name="unit_test"))
bpfFactory.addStep(steps.ShellCommand(command=["make", "package"], env={"HG_USERNAME": "bbslave"}, name="build"))
bpfFactory.addStep(steps.ShellCommand(command="scp -r ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/bpf/", name="distribute"))

abmFactory = util.BuildFactory()
abmFactory.addStep(steps.Git(repourl="git://source.netronome.com/nfp-nic.git", branch="abm", mode="full", method="clobber", name="clone"))
abmFactory.addStep(steps.ShellCommand(command=["make", "test"], env={"HG_USERNAME": "bbslave"}, locks=[nfp_lock.access('exclusive')], name="unit_test"))
abmFactory.addStep(steps.ShellCommand(command=["make", "package"], env={"HG_USERNAME": "bbslave", "COLOR": "no"}, name="build"))
abmFactory.addStep(steps.ShellCommand(command="scp -r ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/abm/", name="distribute"))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="corenic-build",
      workernames=corenic_workers,
      factory=corenicFactory))
c['builders'].append(
    util.BuilderConfig(name="bpf-build",
      workernames=corenic_workers,
      factory=bpfFactory))
c['builders'].append(
    util.BuilderConfig(name="abm-build",
      workernames=corenic_workers,
      factory=abmFactory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

from OpenSSL import SSL
from buildbot.plugins import reporters
from buildbot.status.builder import Results

template=u'''\
<h4>Build status: {{ summary }}</h4>
<p> Responsible user(s): {{ blamelist | join(', ') }} </p>
<p> Repository: {{ build['properties']['repository'][0] }} </p>
<p> Branch: {{ build['properties']['branch'][0] }} </p>
<p> Revision: {{ build['properties']['revision'][0] }} </p>
<p> Worker used: {{ buildername }} / {{ workername }}</p>
<p> URL: {{ build_url }} </p>
{% for step in build['steps'] %}
{% if step['name'] == "unit_test" %}
<p><b> --- </b></p>
<p><b> Test results: </b></p>
{% for log in step['logs'] %}
{% if log['name'] == "stdio" %}
<PRE> {{ log['content']['content'] }}</PRE>
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
<p><b> -- The Buildbot</b></p>
'''

mn_exceptions = reporters.MailNotifier(
        fromaddr="bbslave@netronome.com",
        sendToInterestedUsers=True,
        extraRecipients=['core-nic-dev@netronome.com'],
        builders=["abm-build", "corenic-build", "bpf-build"],
        mode=["cancelled", "change", "failing", "problem", "warnings", "exception"],
        useSmtps=True,
        smtpPort=465,
        relayhost="smtp-relay.gmail.com",
        messageFormatter=reporters.MessageFormatter(
                                template=template, template_type='html',
                                wantProperties=True, wantSteps=True, wantLogs=True))

mn_committer = reporters.MailNotifier(
        fromaddr="bbslave@netronome.com",
        sendToInterestedUsers=True,
        builders=["abm-build", "corenic-build", "bpf-build"],
        mode = "all",
        useSmtps=True,
        smtpPort=465,
        relayhost="smtp-relay.gmail.com",
        messageFormatter=reporters.MessageFormatter(
                                template=template, template_type='html',
                                wantProperties=True, wantSteps=True, wantLogs=True))

c['services'] = []
c['services'].append(mn_committer)
c['services'].append(mn_exceptions)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "CoreNIC Projects"
c['titleURL'] = ""

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://corenic-build.netronome.com/"

# minimalistic config to activate new web UI
c['www'] = dict(port=80,
                plugins=dict(waterfall_view={}, grid_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
