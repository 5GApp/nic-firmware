# -*- python -*-
# ex: set filetype=python:

import os
import re
import jinja2

from buildbot import config
from buildbot.plugins import reporters
from buildbot.plugins import *
from buildbot.status.builder import Results
from OpenSSL import SSL
from jinja2 import environment

# We need this to prevent permission errors when create debian packages in the
# local slaves
os.umask(022)
c = BuildmasterConfig = {}

##### Global Configuration #####################################################

c["title"] = "CoreNIC Projects"
c["titleURL"] = ""
c["buildbotURL"] = "http://corenic-build.netronome.com/"
c["www"] = dict(port=80,
                plugins=dict(waterfall_view={}, grid_view={}, console_view={}))
c["db"] = { "db_url" : "sqlite:///state.sqlite" }
c["protocols"] = {"pb": {"port": 9989}}

c["workers"] = []
c["change_source"] = []
c["schedulers"] = []
c["builders"] = []
c["services"] = []

# Protect the NFP when executing CoreNIC unit tests
nfp_lock = util.MasterLock("local_nfp_worker")

##### Global Workers ###########################################################

dockerWorkers = ["docker-slave-1",
                 "docker-slave-2",
                 "docker-slave-3",
                 "docker-slave-4"]
for workerName in dockerWorkers:
    newWorker = worker.DockerLatentWorker(
        workerName,
        "qwe123",
        docker_host="tcp://127.0.0.1:2375",
        image=workerName,
        followStartupLogs=True)
    c["workers"].append(newWorker)

##### Global Utilities #########################################################

# This requires the property 'dut_ip' to be defined
def commandOnDut(command):
    return util.Interpolate("ssh root@%%(prop:dut_ip)s '%s'" % command)

# Explicitly don't use the Git step here so we can use this with the try scheduler
ntiCloneStep = steps.ShellCommand(
    command=["git", "clone", "--branch", "master", "git://source.netronome.com/nti.git", "."],
    name="clone_nti",
    workdir="nti")
ntiDownloadConfigStep = steps.FileDownload(
    mastersrc=util.Interpolate("nti_configs/%(prop:nti_config)s"),
    workerdest="nti_config.cfg",
    name="download",
    haltOnFailure=True)
ntiGetDutIpStep = steps.SetPropertyFromCommand(
    command="gawk '/\[DUT\]/{dut=1; next} /\[.*\]/{dut=0; next} dut==0{next} /name/{print $2}' nti_config.cfg",
    property="dut_ip",
    hideStepIf=True,
    haltOnFailure=True)
ntiGetSrcIpStep = steps.SetPropertyFromCommand(
    command="gawk '/\[HostA\]/{hosta=1; next} /\[.*\]/{hosta=0; next} hosta==0{next} /name/{print $2}' nti_config.cfg",
    property="hosta_ip",
    hideStepIf=True,
    haltOnFailure=True)
driverTestPrepStep = steps.ShellSequence(
    commands=[
        util.ShellArg(
            command=commandOnDut(\
                "rm -fr /tmp/nfp-drv-kmods-test; " +
                "mkdir -p /tmp/nfp-drv-kmods-test"),
            logfile="rm remote dir"),
        util.ShellArg(
            command=util.Interpolate("rsync -rlv ./* root@%(prop:dut_ip)s:/tmp/nfp-drv-kmods-test/"),
            logfile="transfer driver"),
        util.ShellArg(
            command=commandOnDut(\
                "if [ \"%(prop:upstream:-False)s\" == \"False\" ]; then " +
                "  cd /tmp/nfp-drv-kmods-test && " +
                "  make CONFIG_NFP=m CONFIG_NFP_TEST_HARNESS=m install && " +
                "  depmod -a;" +
                "fi"),
            logfile="install modules"),
        util.ShellArg(
            command=commandOnDut(\
                "export PATH=$PATH:/opt/netronome/bin/; " +
                "cd /tmp/nfp-drv-kmods-test && " +
                "make test_prepare"),
            logfile="build test samples"),
        util.ShellArg(
            command=util.Interpolate("rsync -rlv root@%(prop:dut_ip)s:/tmp/nfp-drv-kmods-test/tests/samples ./tests/"),
            logfile="copy samples"),
        util.ShellArg(
            command="sed -i \"s:__WORKER_DIR__:$(pwd):\" nti_config.cfg",
            logfile="update nti_config"),
        util.ShellArg(
            command=util.Interpolate(\
                "wget --no-use-server-timestamps %(prop:firmware)s && " +
                "mkdir content && " +
                "find . -regextype egrep -iregex '.*(tar\.gz|tgz)' -exec tar -xf {} -C ./content \; && " +
                "find . -regextype egrep -iregex '.*(tar\.gz|tgz)' -delete && " +
                "ln -nsf content/*/ firmware_images && " +
                "if [ -e './firmware_images/install.sh' ]; then " +
                "  cp ./firmware_images/nic_AMDA0097.nffw ./firmware_images/nic_AMDA0097-0001_2x40.nffw; " +
                "  cp ./firmware_images/nic_AMDA0097.nffw ./firmware_images/nic_AMDA0097-0001_8x10.nffw; " +
                "  cp ./firmware_images/nic_AMDA0097.nffw ./firmware_images/nic_AMDA0097-0001_4x10_1x40.nffw; " +
                "  cp ./firmware_images/nic_AMDA0097.nffw ./firmware_images/nic_AMDA0097-0003_1x40.nffw; " +
                "  cp ./firmware_images/nic_AMDA0097.nffw ./firmware_images/nic_AMDA0097-0003_4x10.nffw; " +
                "  cp ./firmware_images/nic_AMDA0097.nffw ./firmware_images/nic_AMDA0081-0001_1x40.nffw; " +
                "  cp ./firmware_images/nic_AMDA0097.nffw ./firmware_images/nic_AMDA0081-0001_4x10.nffw; " +
                "  cp ./firmware_images/nic_AMDA0099.nffw ./firmware_images/nic_AMDA0099-0001_2x25.nffw; " +
                "  cp ./firmware_images/nic_AMDA0099.nffw ./firmware_images/nic_AMDA0099-0001_2x10.nffw; " +
                "  cp ./firmware_images/nic_AMDA0099.nffw ./firmware_images/nic_AMDA0099-0001_1x10_1x25.nffw; " +
                "  cp ./firmware_images/nic_AMDA0096.nffw ./firmware_images/nic_AMDA0096-0001_2x10.nffw; " +
                "  cp ./firmware_images/nic_AMDA0058.nffw ./firmware_images/nic_AMDA0058-0011_2x40.nffw; " +
                "  cp ./firmware_images/nic_AMDA0058.nffw ./firmware_images/nic_AMDA0058-0011_8x10.nffw; " +
                "  cp ./firmware_images/nic_AMDA0058.nffw ./firmware_images/nic_AMDA0058-0011_4x10_1x40.nffw; " +
                "  cp ./firmware_images/nic_AMDA0058.nffw ./firmware_images/nic_AMDA0058-0012_2x40.nffw;    " +
                "  cp ./firmware_images/nic_AMDA0058.nffw ./firmware_images/nic_AMDA0058-0012_8x10.nffw; " +
                "  cp ./firmware_images/nic_AMDA0058.nffw ./firmware_images/nic_AMDA0058-0012_4x10_1x40.nffw; " +
                "fi"),
            logfile="firmware")],
    name="preparation",
    env={"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/netronome/bin"},
    haltOnFailure=True)
driverTestVersionStep = steps.ShellSequence(
    commands=[
        util.ShellArg(
            command="ls -l",
            logfile="build dir content"),
        util.ShellArg(
            command="find firmware_images/",
            logfile="firmware dir content"),
        util.ShellArg(
            command="cat nti_config.cfg",
            logfile="nti config"),
        util.ShellArg(
            command="cd ../nti; git log --oneline | head -10",
            logfile="nti repo"),
        util.ShellArg(
            command=commandOnDut("modinfo nfp"),
            logfile="nfp.ko"),
        util.ShellArg(
            command=commandOnDut("modinfo nfp_test_harness || :"),
            logfile="nfp_test_harness.ko")],
    name="versions")
ntiExecuteTestStep = steps.ShellCommand(
    workdir="build/",
    command=util.Interpolate("mkdir -p logs; %(prop:builddir)s/nti/ti/ticmd -qc %(prop:builddir)s/build/nti_config.cfg -l logs run %(prop:nti_test)s"),
    logfiles={
        "details": {
            "filename": "logs/details.log",
            "follow": True},
        "commands": {
            "filename": "logs/commands.log",
            "follow": True},
        "results": {
            "filename": "logs/results.csv",
            "follow": True},
        "summary": {
            "filename": "logs/summary.log",
            "follow": True}},
    name="test",
    haltOnFailure=True)
driverTestCleanupStep = steps.ShellCommand(
    command=commandOnDut(
        "rm -f /lib/modules/$(uname -r)/extra/nfp_test_harness.ko && "
        "(cd /tmp/nfp-drv-kmods-test && make uninstall) || :"),
    name="cleanup",
    alwaysRun=True)

##### CoreNIC Build Configuration ##############################################

# WORKERS
corenicWorkers = ["corenic-slave-1",
                  "corenic-slave-2",
                  "corenic-slave-3",
                  "corenic-slave-4"]
for workerName in corenicWorkers:
    newWorker = worker.LocalWorker(workerName)
    c["workers"].append(newWorker)

# CHANGESOURCES
corenicPoller = changes.GitPoller(
    repourl="git://source.netronome.com/nfp-nic.git",
    workdir="gitpoller-nfp-nic",
    branches=["master", "bpf", "abm"],
    pollinterval=30,
    project="corenic")
c["change_source"].append(corenicPoller)

# SCHEDULERS
corenicSched = schedulers.SingleBranchScheduler(
    name="corenicSched",
    change_filter=util.ChangeFilter(
        branch="master",
        project="corenic"),
    treeStableTimer=None,
    builderNames=["corenic-build"])
forceCorenicSched = schedulers.ForceScheduler(
    name="forceCorenicSched",
    buttonName="Force",
    builderNames=["corenic-build"],
    codebases=[
        util.CodebaseParameter(
            "",
            label="Main repository",
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default=""),
            branch=util.FixedParameter(name="branch", default="master"))])
tryCorenicSched = schedulers.Try_Jobdir(
    name="tryCorenicSched",
    builderNames=["corenic-build"],
    jobdir="jobs_corenic")

bpfSched = schedulers.SingleBranchScheduler(
    name="bpfSched",
    change_filter=util.ChangeFilter(
        branch="bpf",
        project="corenic"),
    treeStableTimer=None,
    builderNames=["bpf-build"])
forceBpfSched = schedulers.ForceScheduler(
    name="forceBpfSched",
    buttonName="Force",
    builderNames=["bpf-build"],
    codebases=[
        util.CodebaseParameter(
            "",
            label="BFP repository",
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default=""),
            branch=util.FixedParameter(name="branch", default="bpf"))])
tryBpfSched = schedulers.Try_Jobdir(
    name="tryBpfSched",
    builderNames=["bpf-build"],
    jobdir="jobs_bpf")

abmSched = schedulers.SingleBranchScheduler(
    name="abmSched",
    change_filter=util.ChangeFilter(
        branch="abm",
        project="corenic"),
    treeStableTimer=None,
    builderNames=["abm-build"])
forceAbmSched = schedulers.ForceScheduler(
    name="forceAbmSched",
    buttonName="Force",
    builderNames=["abm-build"],
    codebases=[
        util.CodebaseParameter(
            "",
            label="ABM repository",
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default=""),
            branch=util.FixedParameter(name="branch", default="abm"))])
tryAbmSched = schedulers.Try_Jobdir(
    name="tryAbmSched",
    builderNames=["abm-build"],
    jobdir="jobs_abm")

c["schedulers"].append(corenicSched)
c["schedulers"].append(forceCorenicSched)
c["schedulers"].append(tryCorenicSched)
c["schedulers"].append(bpfSched)
c["schedulers"].append(forceBpfSched)
c["schedulers"].append(tryBpfSched)
c["schedulers"].append(abmSched)
c["schedulers"].append(forceAbmSched)
c["schedulers"].append(tryAbmSched)

# BUILDERS

# These are common steps for all the CoreNIC related builders
unitTestStep = steps.Compile(
    command=["make", "test"],
    env={"HG_USERNAME": "bbslave",
         "PATH": ["/opt/netronome/bin", "${PATH}"]},
    locks=[nfp_lock.access("exclusive")],
    name="unit_test",
    haltOnFailure=True)

buildStep = steps.Compile(
    command=["make", "package"],
    env={"HG_USERNAME": "bbslave",
         "PATH": ["/opt/netronome/bin", "${PATH}"]},
    name="build",
    haltOnFailure=True,
    suppressionList=[
        (None, ".*warning: Arch dependent binaries in noarch package", None, None)])

corenicFactory = util.BuildFactory()
corenicFactory.addStep(
    steps.Git(
        repourl="git://source.netronome.com/nfp-nic.git",
        branch="master",
        mode="full",
        method="clobber",
        name="clone"))
corenicFactory.addStep(unitTestStep)
corenicFactory.addStep(buildStep)
corenicFactory.addStep(
    steps.ShellCommand(
        command="rsync -rlv ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/current/",
        name="distribute"))

bpfFactory = util.BuildFactory()
bpfFactory.addStep(
    steps.Git(
        repourl="git://source.netronome.com/nfp-nic.git",
        branch="bpf",
        mode="full",
        method="clobber",
        name="clone"))
bpfFactory.addStep(unitTestStep)
bpfFactory.addStep(buildStep)
bpfFactory.addStep(
    steps.ShellCommand(
        command="rsync -rlv ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/bpf/",
        name="distribute"))

abmFactory = util.BuildFactory()
abmFactory.addStep(
    steps.Git(
        repourl="git://source.netronome.com/nfp-nic.git",
        branch="abm",
        mode="full",
        method="clobber",
        name="clone"))
abmFactory.addStep(unitTestStep)
abmFactory.addStep(buildStep)
abmFactory.addStep(
    steps.ShellCommand(
        command="rsync -rlv ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/abm/",
        name="distribute"))

c["builders"].append(
    util.BuilderConfig(
        name="corenic-build",
        workernames=corenicWorkers,
        factory=corenicFactory))
c["builders"].append(
    util.BuilderConfig(
        name="bpf-build",
        workernames=corenicWorkers,
        factory=bpfFactory))
c["builders"].append(
    util.BuilderConfig(
        name="abm-build",
        workernames=corenicWorkers,
        factory=abmFactory))

# MAIL NOTIFIER SERVICES
# We shamelessly borrowed this piece of code from:
# https://stackoverflow.com/questions/14693701/how-can-i-remove-the-ansi-escape-sequences-from-a-string-in-python
def removeAnsiEscapeChars(text):
    ansiEscape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
    return ansiEscape.sub('', text)

def unitTestLogFilter(message):
    output = ""
    for line in message.splitlines():
        if line[0] == "o" and re.search('pass|fail', line, re.IGNORECASE):
            output += "%s\n" % removeAnsiEscapeChars(line[1:])
    return output

# We really want to filter out some of the log lines. Jinja2 provides the
# capabaility to add your own custom filters, but Buildbot doesn't expose that.
# So we override the 'getTemplate' function and add the filter before compiling
# the template.
class CustomMessageFormatter(reporters.MessageFormatter):
    def getTemplate(self, filename, dirname, content):
        if not content:
            config.error("The custom message formatter only expects message content")

        env = environment.get_spontaneous_environment()
        env.filters['unitTestLogFilter'] = unitTestLogFilter
        return env.from_string(content)

template=u"""\
<h4>Build status: {{ summary }}</h4>
<p> Responsible user(s): {{ blamelist | join(", ") }} </p>
<p> Repository: {{ build["properties"]["repository"][0] }} </p>
<p> Branch: {{ build["properties"]["branch"][0] }} </p>
<p> Revision: {{ build["properties"]["revision"][0] }} </p>
<p> Worker used: {{ buildername }} / {{ workername }}</p>
<p> URL: {{ build_url }} </p>
{% for step in build["steps"] %}
{% if step["name"] == "unit_test" %}
<p><b> --- </b></p>
<p><b> Test results: </b></p>
{% for log in step["logs"] %}
{% if log["name"] == "stdio" %}
<div style="white-space: pre-wrap;font-family:monospace;">{{ log["content"]["content"]|unitTestLogFilter }}</div>
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
<p><b> -- The Buildbot</b></p>
<p></p>
"""

mn_exceptions = reporters.MailNotifier(
    fromaddr="bbslave@netronome.com",
    sendToInterestedUsers=True,
    extraRecipients=["core-nic-dev@netronome.com"],
    builders=["abm-build", "corenic-build", "bpf-build"],
    mode=["cancelled", "change", "failing", "problem", "warnings", "exception"],
    useSmtps=True,
    smtpPort=465,
    relayhost="smtp-relay.gmail.com",
    messageFormatter=CustomMessageFormatter(
        template=template,
        template_type="html",
        wantProperties=True,
        wantSteps=True,
        wantLogs=True))

mn_committer = reporters.MailNotifier(
    fromaddr="bbslave@netronome.com",
    sendToInterestedUsers=True,
    builders=["abm-build", "corenic-build", "bpf-build"],
    mode = "all",
    useSmtps=True,
    smtpPort=465,
    relayhost="smtp-relay.gmail.com",
    messageFormatter=CustomMessageFormatter(
        template=template,
        template_type="html",
        wantProperties=True,
        wantSteps=True,
        wantLogs=True))

c["services"].append(mn_committer)
c["services"].append(mn_exceptions)

##### nfp-drv-kmods Configuration ##############################################

# WORKERS
driverWorkers = dockerWorkers

# SCHEDULERS
forceBpfTestSched = schedulers.ForceScheduler(
    name="forceBpfTestSched",
    buttonName="Force",
    builderNames=["bpf-test"],
    properties=[
        util.StringParameter(
            name="nti_test",
            label="Test specification",
            default="tests.ebpf",
            size=40),
        util.StringParameter(
            name="nti_config",
            label="Configuration file to use (must exist on the build master)",
            default="cbtest11_001.cfg",
            size=60),
        util.StringParameter(
            name="firmware",
            label="Firmware tarball",
            default="http://pahome.netronome.com/releases-intern/nic/builds/bpf/tgz/agilio-bpf-firmware-2.0.6.95.e7be66c.tgz",
            size=120)],
    codebases=[
        util.CodebaseParameter(
            "",
            label="nfp-drv-kmods repository",
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default="nfp-drv-kmods"),
            branch=util.StringParameter(name="branch", default="master"))])
c["schedulers"].append(forceBpfTestSched)

nightlyBpfTestSched = schedulers.Nightly(
    name="bpfNightly",
    branch="master",
    builderNames=["bpf-test"],
    hour=18,
    minute=0)
c["schedulers"].append(nightlyBpfTestSched)

forceDriverTestSched = schedulers.ForceScheduler(
    name="forceDriverTestSched",
    buttonName="Force",
    builderNames=["nfp-drv-kmods-test"],
    properties=[
        util.StringParameter(
            name="nti_test",
            label="Test specification",
            default="tests",
            size=40),
        util.StringParameter(
            name="nti_config",
            label="Configuration file to use (must exist on the build master)",
            default="dirk-dut_001.cfg",
            size=60),
        util.StringParameter(
            name="firmware",
            label="Firmware tarball",
            default="http://pahome.netronome.com/releases-intern/nic/builds/2.0/tgz/agilio-nic-firmware-2.0.7.tgz",
            size=120),
        util.BooleanParameter(
            name="upstream",
            label="Test upstream driver",
            default=False)],
    codebases=[
        util.CodebaseParameter(
            "",
            label="nfp-drv-kmods repository",
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default="nfp-drv-kmods"),
            branch=util.StringParameter(name="branch", default="master"))])
c["schedulers"].append(forceDriverTestSched)

tryDriverSched = schedulers.Try_Jobdir(
    name="tryDriverSched",
    builderNames=["nfp-drv-kmods-test"],
    jobdir="jobs_nfp-drv-kmods")
c["schedulers"].append(tryDriverSched)

# BUILDERS
driverTestFactory = util.BuildFactory()
driverTestFactory.addStep(
    steps.Git(
        repourl="git://source.netronome.com/nfp-drv-kmods.git",
        mode="full",
        method="clobber",
        name="clone"))
driverTestFactory.addStep(ntiCloneStep)
driverTestFactory.addStep(ntiDownloadConfigStep)
driverTestFactory.addStep(ntiGetDutIpStep)
driverTestFactory.addStep(driverTestPrepStep)
driverTestFactory.addStep(driverTestVersionStep)
driverTestFactory.addStep(ntiExecuteTestStep)
driverTestFactory.addStep(driverTestCleanupStep)

c["builders"].append(
    util.BuilderConfig(
        name="nfp-drv-kmods-test",
        workernames=driverWorkers,
        factory=driverTestFactory))
c["builders"].append(
    util.BuilderConfig(
        name="bpf-test",
        workernames=driverWorkers,
        factory=driverTestFactory))

test_template=u"""\
<h4>Build status: {{ summary }}</h4>
<p> Responsible user(s): {{ blamelist | join(", ") }} </p>
<p> Repository: {{ build["properties"]["repository"][0] }} </p>
<p> Branch: {{ build["properties"]["branch"][0] }} </p>
<p> Revision: {{ build["properties"]["revision"][0] }} </p>
<p> Worker used: {{ buildername }} / {{ workername }}</p>
<p> URL: {{ build_url }} </p>
{% for step in build["steps"] %}
{% if step["name"] == "test" %}
<p><b> --- </b></p>
<p><b> Test results: </b></p>
{% for log in step["logs"] %}
{% if log["name"] == "summary" %}
<div style="white-space: pre-wrap;font-family:monospace;">{{ log["content"]["content"] }}</div>
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
<p></p>
<p><b> -- The Buildbot</b></p>
"""

mn_bpf_test = reporters.MailNotifier(
    fromaddr="bbslave@netronome.com",
    sendToInterestedUsers=True,
    extraRecipients=["dirk.vandermerwe@netronome.com",
        "nick.viljoen@netronome.com", "pieter.gildenhuys@netronome.com"],
    builders=["bpf-test"],
    mode = "all",
    useSmtps=True,
    smtpPort=465,
    relayhost="smtp-relay.gmail.com",
    messageFormatter=CustomMessageFormatter(
        template=test_template,
        template_type="html",
        wantProperties=True,
        wantSteps=True,
        wantLogs=True))
c["services"].append(mn_bpf_test)

##### Sprite-Shell Configuration ###############################################

# WORKERS
spriteWorkers = dockerWorkers

# CHANGESOURCES
spritePoller = changes.GitPoller(
    repourl="git://source.netronome.com/sprite-shell.git",
    workdir="gitpoller-sprite-shell",
    branches=["master"],
    pollinterval=60,
    project="sprite-shell")
c["change_source"].append(spritePoller)

# SCHEDULERS
spriteBuildSched = schedulers.SingleBranchScheduler(
    name="spriteBuildSched",
    change_filter=util.ChangeFilter(
        branch="master",
        project="sprite-shell"),
    treeStableTimer=None,
    builderNames=["sprite-build"])
forceSpriteBuildSched = schedulers.ForceScheduler(
    name="forceSpriteBuildSched",
    buttonName="Force",
    builderNames=["sprite-build"],
    codebases=[
        util.CodebaseParameter(
            "",
            label="Sprite-Shell repository",
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default="sprite-shell"),
            branch=util.FixedParameter(name="branch", default="master"))])
c["schedulers"].append(spriteBuildSched)
c["schedulers"].append(forceSpriteBuildSched)

forceSpriteTestSched = schedulers.ForceScheduler(
    name="forceSpriteTestSched",
    buttonName="Force",
    builderNames=["sprite-test"],
    properties=[
        util.StringParameter(name="nti_test",
                             label="Test specification",
                             default="tests.mbl",
                             size=40),
        util.StringParameter(name="nti_config",
                             label="Configuration file to use (must exist on the build master)",
                             default="nxg-dev-1u-mockup-01_001.cfg",
                             size=60)],
    codebases=[
        util.CodebaseParameter(
            "",
            label="Sprite-Shell repository",
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default="sprite-shell"),
            branch=util.FixedParameter(name="branch", default="master"))])
c["schedulers"].append(forceSpriteTestSched)

trySpriteSched = schedulers.Try_Jobdir(
    name="trySpriteSched",
    builderNames=["sprite-build", "sprite-test"],
    jobdir="jobs_sprite",
    properties={"output_dir": "patched"})
c["schedulers"].append(trySpriteSched)

# BUILDERS
spriteBuildFactory = util.BuildFactory()
spriteBuildFactory.addStep(
    steps.Git(
        repourl="git://source.netronome.com/sprite-shell.git",
        branch="master",
        mode="full",
        method="clobber",
        name="clone",
        haltOnFailure=True))
spriteBuildFactory.addStep(
    steps.Compile(
        command=["make", "package"],
        name="build",
        haltOnFailure=True,
        suppressionList=[
            (None, ".*dpkg-gencontrol: warning: File::FcntlLock not available; using flock which is not NFS-safe", None, None)]))
spriteBuildFactory.addStep(
    steps.ShellCommand(
        workdir="build/pkg_build",
        command=util.Interpolate(\
            "rsync -rlv * " +
            "  bbslave@pahome.netronome.com:/releases-intern/sprite/sprite-driver/%(prop:output_dir:-untested)s/"),
        name="distribute",
        haltOnFailure=True))

spriteTestFactory = util.BuildFactory()
spriteTestFactory.addStep(
    steps.Git(
        repourl="git://source.netronome.com/sprite-shell.git",
        branch="master",
        mode="full",
        method="clobber",
        name="clone"))
spriteTestFactory.addStep(
    steps.Compile(
        command=["make", "kernel_fetch_deps"],
        name="fetch_deps",
        haltOnFailure=True))
# Explicitly don't use the Git step here so we can use this with the try scheduler
spriteTestFactory.addStep(
    steps.ShellCommand(
        command=["git", "clone", "--branch", "master", "git://source.netronome.com/nti.git", "."],
        name="clone_nti",
        workdir="nti"))
spriteTestFactory.addStep(
    steps.FileDownload(
        mastersrc=util.Interpolate("nti_configs/%(prop:nti_config)s"),
        workerdest="nti_config.cfg",
        name="download",
        haltOnFailure=True))
spriteTestFactory.addStep(
    steps.SetPropertyFromCommand(
        command="gawk '/\[DUT\]/{dut=1; next} /\[.*\]/{dut=0; next} dut==0{next} /name/{print $2}' nti_config.cfg",
        property="dut_ip",
        hideStepIf=True,
        haltOnFailure=True))
spriteTestFactory.addStep(
    steps.ShellSequence(
        commands=[
            util.ShellArg(
                command="sed -i \"s:__WORKER_DIR__:$(pwd):\" nti_config.cfg",
                logfile="update nti_config"),
            util.ShellArg(
                command=util.Interpolate(\
                    "wget --no-use-server-timestamps %(prop:firmware)s && " +
                    "mkdir content && " +
                    "find . -regextype egrep -iregex '.*(tar\.gz|tgz)' -exec tar -xf {} -C ./content \; && " +
                    "find . -regextype egrep -iregex '.*(tar\.gz|tgz)' -delete && " +
                    "ln -nsf content/*/ firmware_images"),
                logfile="firmware"),
            util.ShellArg(
                command=commandOnDut(\
                    "rm -fr /tmp/sprite-driver-test && " +
                    "mkdir -p /tmp/sprite-driver-test"),
                logfile="rm dir"),
            util.ShellArg(
                command=commandOnDut("rmmod nfp_ualt; rmmod nfp_test_harness; rmmod nfp || :"),
                logfile="rmmod"),
            util.ShellArg(
                command=commandOnDut(\
                    "dpkg --purge sprite-driver-dkms sprite-ualt-dkms && " +
                    "rm -fr /usr/src/sprite-*"),
                logfile="dpkg --purge"),
            util.ShellArg(
                command=commandOnDut(\
                    "cd /tmp/sprite-driver-test && " +
                    "wget --no-use-server-timestamps %(prop:driver_dpkg)s && " +
                    "wget --no-use-server-timestamps %(prop:ualt_dpkg)s && " +
                    "dpkg --install ./*.deb && " +
                    "cd /usr/src/sprite-driver*/ && " +
                    "make CONFIG_NFP=n CONFIG_NFP_TEST_HARNESS=m install"),
                logfile="install modules")],
        name="preparation",
        haltOnFailure=True))
spriteTestFactory.addStep(
    steps.ShellSequence(
        commands=[
            util.ShellArg(
                command="cat nti_config.cfg",
                logfile="nti config"),
            util.ShellArg(
                command="cd ../nti; git log --oneline | head -10",
                logfile="nti repo"),
            util.ShellArg(
                command="ls -l",
                logfile="build dir content"),
            util.ShellArg(
                command="find firmware_images/",
                logfile="firmware dir content"),
            util.ShellArg(
                command=commandOnDut("dpkg --list | grep sprite"),
                logfile="dpkg list"),
            util.ShellArg(
                command=commandOnDut("dkms status"),
                logfile="dkms status"),
            util.ShellArg(
                command=commandOnDut("modinfo nfp"),
                logfile="nfp.ko"),
            util.ShellArg(
                command=commandOnDut("modinfo nfp_test_harness"),
                logfile="nfp_test_harness.ko"),
            util.ShellArg(
                command=commandOnDut("modinfo nfp_ualt"),
                logfile="nfp_ualt.ko")],
        name="versions"))
spriteTestFactory.addStep(
    steps.ShellCommand(
        workdir="build/kernel/nfp-drv-kmods/",
        command=util.Interpolate("mkdir -p logs; %(prop:builddir)s/nti/ti/ticmd -qc %(prop:builddir)s/build/nti_config.cfg -l logs run %(prop:nti_test)s"),
        logfiles={
            "details": {
                "filename": "logs/details.log",
                "follow": True},
            "commands": {
                "filename": "logs/commands.log",
                "follow": True},
            "results": {
                "filename": "logs/results.csv",
                "follow": True},
            "summary": {
                "filename": "logs/summary.log",
                "follow": True}},
        name="test",
        haltOnFailure=True))

c["builders"].append(
    util.BuilderConfig(
        name="sprite-build",
        workernames=spriteWorkers,
        factory=spriteBuildFactory))
c["builders"].append(
    util.BuilderConfig(
        name="sprite-test",
        workernames=spriteWorkers,
        factory=spriteTestFactory))

# MAIL NOTIFIER SERVICES
sprite_template=u"""\
<h4>Build status: {{ summary }}</h4>
<p> Responsible user(s): {{ blamelist | join(", ") }} </p>
<p> Repository: {{ build["properties"]["repository"][0] }} </p>
<p> Branch: {{ build["properties"]["branch"][0] }} </p>
<p> Revision: {{ build["properties"]["revision"][0] }} </p>
<p> Worker used: {{ buildername }} / {{ workername }}</p>
<p> URL: {{ build_url }} </p>
<p></p>
<p><b> -- The Buildbot</b></p>
"""

mn_sprite_build = reporters.MailNotifier(
    fromaddr="bbslave@netronome.com",
    sendToInterestedUsers=True,
    builders=["sprite-build", "sprite-test"],
    mode = "all",
    useSmtps=True,
    smtpPort=465,
    relayhost="smtp-relay.gmail.com",
    messageFormatter=CustomMessageFormatter(
        template=sprite_template,
        template_type="html",
        wantProperties=True,
        wantSteps=True,
        wantLogs=True))

c["services"].append(mn_sprite_build)
