# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("corenic-slave-1", "qwe123"),
                worker.Worker("corenic-slave-2", "qwe123"),
                worker.Worker("corenic-slave-3", "qwe123"),
                worker.Worker("corenic-slave-4", "qwe123"),
                worker.Worker("nfp-slave-1", "qwe123")]

nfp_workers = ["nfp-slave-1"]
corenic_workers = ["corenic-slave-1",
                   "corenic-slave-2",
                   "corenic-slave-3",
                   "corenic-slave-4"]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://source.netronome.com/nfp-nic.git',
        workdir='gitpoller-nfp-nic', branches=['master', 'bpf', 'abm'],
        pollinterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="corenicSched",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["corenic-build"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="bpfSched",
                            change_filter=util.ChangeFilter(branch='bpf'),
                            treeStableTimer=None,
                            builderNames=["bpf-build"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="abmSched",
                            change_filter=util.ChangeFilter(branch='abm'),
                            treeStableTimer=None,
                            builderNames=["abm-build"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="Force",
                            builderNames=["corenic-build", "bpf-build", "abm-build"]))
c['schedulers'].append(schedulers.Triggerable(
                            name="nfpUnitTestSched",
                            builderNames=["nfp-unit-tests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

corenicFactory = util.BuildFactory()
corenicFactory.addStep(steps.Git(repourl='git://source.netronome.com/nfp-nic.git', branch='master', mode='full', method='clobber'))
corenicFactory.addStep(steps.ShellCommand(command=["make", "package"]))
corenicFactory.addStep(steps.Trigger(schedulerNames=['nfpUnitTestSched'], waitForFinish=True))
corenicFactory.addStep(steps.ShellCommand(command="scp -r ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/current/"))

bpfFactory = util.BuildFactory()
bpfFactory.addStep(steps.Git(repourl='git://source.netronome.com/nfp-nic.git', branch='bpf', mode='full', method='clobber'))
bpfFactory.addStep(steps.ShellCommand(command=["make", "package"], env={"HG_USERNAME": "bbslave"}))
bpfFactory.addStep(steps.Trigger(schedulerNames=['nfpUnitTestSched'], waitForFinish=True))
bpfFactory.addStep(steps.ShellCommand(command="scp -r ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/bpf/"))

abmFactory = util.BuildFactory()
abmFactory.addStep(steps.Git(repourl='git://source.netronome.com/nfp-nic.git', branch='abm', mode='full', method='clobber'))
abmFactory.addStep(steps.ShellCommand(command=["make", "package"], env={"HG_USERNAME": "bbslave"}))
abmFactory.addStep(steps.Trigger(schedulerNames=['nfpUnitTestSched'], waitForFinish=True))
abmFactory.addStep(steps.ShellCommand(command="scp -r ./firmware/pkg/out/* bbslave@pahome.netronome.com:/releases-intern/nic/abm/"))

unitFactory = util.BuildFactory()
unitFactory.addStep(steps.Git(repourl='git://source.netronome.com/nfp-nic.git', mode='full', method='clobber'))
unitFactory.addStep(steps.ShellCommand(command=["make", "test"], env={"HG_USERNAME": "bbslave"}))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="corenic-build",
      workernames=corenic_workers,
      factory=corenicFactory))
c['builders'].append(
    util.BuilderConfig(name="bpf-build",
      workernames=corenic_workers,
      factory=bpfFactory))
c['builders'].append(
    util.BuilderConfig(name="abm-build",
      workernames=corenic_workers,
      factory=abmFactory))
c['builders'].append(
    util.BuilderConfig(name="nfp-unit-tests",
      workernames=nfp_workers,
      factory=unitFactory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

from OpenSSL import SSL
from buildbot.plugins import reporters
mn = reporters.MailNotifier(fromaddr="bbslave@netronome.com",
                            sendToInterestedUsers=True,
                            extraRecipients=['core-nic-dev@netronome.com'],
                            builders=["abm-build", "corenic-build", "bpf-build"],
                            mode=["cancelled", "change", "failing", "problem", "warnings", "exception"],
                            useSmtps=True,
                            smtpPort=465,
                            relayhost="smtp-relay.gmail.com")

c['services'] = []
c['services'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "CoreNIC Projects"
c['titleURL'] = ""

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://172.22.1.20/"

# minimalistic config to activate new web UI
c['www'] = dict(port=80,
                plugins=dict(waterfall_view={}, grid_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
