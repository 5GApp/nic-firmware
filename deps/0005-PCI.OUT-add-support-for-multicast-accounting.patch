From 1e56413329bca4d58e3d4b2af1c6d50fccad66c5 Mon Sep 17 00:00:00 2001
From: Edwin Peer <edwin.peer@netronome.com>
Date: Fri, 21 Sep 2018 17:50:43 -0700
Subject: [PATCH 5/9] [PCI.OUT] add support for multicast accounting

CoreNIC introduces a multicast reference counting scheme based on a special
purpose BLQ. Buffers released to this BLQ can be sent multiple times over,
but NFD must not free the CTM buffer in such cases. A separate ME, the
multicast reaper (MCR), is responsible for deallocating buffers based on
its own internal accounting.

This patch introduces a new compile time option for NFD. NFD_PD_MCR_BLQ
defines the aforementioned BLQ. If the packet's assigned buffer list
matches this BLQ, then the CTM buffer will not be freed by PD. NFD is
still responsible for "freeing" this packet to the special BLQ, however,
in this event the buffer is not actually released, but is rather being
sent to MCR via this BLQ for further tracking.

Signed-off-by: Edwin Peer <edwin.peer@netronome.com>
---
 me/blocks/vnic/pci_out_pd.uc | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/me/blocks/vnic/pci_out_pd.uc b/me/blocks/vnic/pci_out_pd.uc
index 84f6620b..5786438d 100644
--- a/me/blocks/vnic/pci_out_pd.uc
+++ b/me/blocks/vnic/pci_out_pd.uc
@@ -796,6 +796,11 @@ add_wq_credits#:
     beq[no_ctm_buffer#]
 #endif
 
+    wsm_extract(ring_num, io_work, SB_WQ_BLS)
+#ifdef NFD_PD_MCR_BLQ
+    br=byte[ring_num, 0, NFD_PD_MCR_BLQ, no_ctm_buffer#]
+#endif
+
     // Free CTM buffer
     alu[addr_hi, g_pkt_free_hi, OR, isl, <<24]
     alu[addr_lo, g_pkt_num_mask, AND, io_work[SB_WQ_PKT_NUM_wrd], >>SB_WQ_PKT_NUM_shf]
@@ -804,10 +809,9 @@ add_wq_credits#:
 no_ctm_buffer#:
     mem[release_ticket, $ticket, 0, bitmap_lo, 1], sig_done[ticket_sig]
 
-    wsm_extract(addr_lo, io_work, SB_WQ_MUBUF)
     ctx_arb[ticket_sig], defer[2]
+    wsm_extract(addr_lo, io_work, SB_WQ_MUBUF)
     alu[cntr_addr_lo, NFD_OUT_ATOMICS_DMA_DONE, OR, qnum, <<4]
-    wsm_extract(ring_num, io_work, SB_WQ_BLS)
 
     // Free the MU buffer
     alu[-- , g_blm_iref, OR, ring_num, <<16]
-- 
2.19.0

